package test;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;

import org.custommonkey.xmlunit.XMLAssert;
import org.custommonkey.xmlunit.XMLUnit;
import org.junit.Test;
import org.xml.sax.SAXException;

import defaultPart.Logic;
import defaultPart.Recur;
import defaultPart.Recur.TimeUnit;
import defaultPart.Storage;
import defaultPart.Task;
import defaultPart.TaskDate;
import defaultPart.TaskTime;

public class SystemTest {

	/* Location to load/save the expected test results */
	private static final String EXPECTED_FILE_NAME = "test\\SystemTest_expected.xml";
	private static final String TEST_FILE_NAME = "test\\SystemTest_actual.xml";

	/**
	 * 
	 * @param timeUnit
	 * @param frequency
	 * @param startOfRecur
	 * @param endOfRecur
	 * @throws ParseException
	 */
	private Recur createRecur(String timeUnit, int frequency, String startOfRecur, String endOfRecur)
			throws ParseException {
		Recur newRecur = new Recur();

		newRecur.setTimeUnit(TimeUnit.valueOf(timeUnit));
		newRecur.setFrequency(frequency);
		TaskDate startDate = new TaskDate();
		startDate.setDateFromString(startOfRecur);
		newRecur.setStartDate(startDate);
		if (endOfRecur != null) {
			TaskDate endDate = new TaskDate();
			endDate.setDateFromString(endOfRecur);
			newRecur.setEndDate(endDate);
		}
		return newRecur;

	}

	/**
	 * Helper function to create the expected file to compare with the one generated by logic
	 * 
	 * @param expectedFile
	 *            Expected file to save
	 * @throws SAXException
	 * @throws ParseException
	 */
	private void storageCreateExpectedTask(File expectedFile, String description, String date,
			String startTime, String endTime, Boolean completed, Recur recur)
					throws SAXException, ParseException {
		Storage expStorage = new Storage(expectedFile);
		Task newTask = new Task();
		newTask.setDescription(description);

		if (date != null) {
			TaskDate calDate = new TaskDate();
			calDate.setDateFromString(date);
			newTask.setDate(calDate);
		}
		if (startTime != null) {
			TaskTime calStartTime = new TaskTime();
			calStartTime.setTimeFromString(startTime);
			newTask.setStartTime(calStartTime);
		}
		if (endTime != null) {
			TaskTime calEndTime = new TaskTime();
			calEndTime.setTimeFromString(startTime);
			newTask.setStartTime(calEndTime);
		}
		if (completed) {
			newTask.toggleCompleted();
		}
		if (recur != null) {
			newTask.setRecur(recur);
		}
		expStorage.addToTaskList(newTask);
		expStorage.saveTasksToFile();
	}

	/**
	 * Helper function to create the actual file to created by parsing the command through logic and saving it
	 * through its storage
	 * 
	 * @param cmd
	 *            command to be parsed and executed
	 * @throws SAXException
	 */
	private File logicExecuteCommand(String cmd) throws SAXException {

		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(testFile);
		logic.executeCommand(cmd);
		logic.saveTasksToFile();
		return testFile;
	}

	@Test
	public final void testAddFloatingTask() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = logicExecuteCommand("CS2103T Reading");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		storageCreateExpectedTask(expectedFile, "CS2103T Reading", null, null, null, false, null);

		// Settings for XML formatting
		XMLUnit.setIgnoreWhitespace(true);
		XMLUnit.setIgnoreComments(true);
		XMLUnit.setIgnoreDiffBetweenTextAndCDATA(true);
		XMLUnit.setNormalizeWhitespace(true);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(testFile);
		FileReader fr2 = new FileReader(expectedFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineWithNumberInDescription()
			throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = logicExecuteCommand("500 words CFG1010 8/4");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		storageCreateExpectedTask(expectedFile, "500 words CFG1010", "8-4-2016", null, null, false, null);

		// Settings for XML formatting
		XMLUnit.setIgnoreWhitespace(true);
		XMLUnit.setIgnoreComments(true);
		XMLUnit.setIgnoreDiffBetweenTextAndCDATA(true);
		XMLUnit.setNormalizeWhitespace(true);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(testFile);
		FileReader fr2 = new FileReader(expectedFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineWithTime() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = logicExecuteCommand("Plan Jap Trip 30/1/2016 11am");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		storageCreateExpectedTask(expectedFile, "Plan Jap Trip", "30-1-2016", "11:00AM", null, false, null);

		// Settings for XML formatting
		XMLUnit.setIgnoreWhitespace(true);
		XMLUnit.setIgnoreComments(true);
		XMLUnit.setIgnoreDiffBetweenTextAndCDATA(true);
		XMLUnit.setNormalizeWhitespace(true);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(testFile);
		FileReader fr2 = new FileReader(expectedFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	// TODO
	/*
	 * @Test public final void testCase7() throws SAXException, IOException, ParseException {
	 * 
	 * File testFile = new File(TEST_FILE_NAME); Logic logic = new Logic(testFile); logic.executeCommand(
	 * "Date with imaginary girlfriend 12:00"); logic.saveTasksToFile();
	 * 
	 * File expectedFile = new File(EXPECTED_FILE_NAME); Storage expStorage = new Storage(expectedFile); Task
	 * newTask = new Task(); newTask.setDescription("Date with imaginary girlfriend"); Calendar calDate = new
	 * GregorianCalendar(); calDate.setTime(formatterDate.parse("15-4-2016")); newTask.setDate(calDate);
	 * Calendar calStartTime = new GregorianCalendar(); calStartTime.setTime(formatterDate.parse(
	 * "01-1-1970 11:00:00")); newTask.setStartTime(calStartTime); expStorage.addToTaskList(newTask);
	 * expStorage.saveTasksToFile(); FileReader fr1 = new FileReader(testFile); FileReader fr2 = new
	 * FileReader(expectedFile);
	 * 
	 * // Settings for XML formatting XMLUnit.setIgnoreWhitespace(true); XMLUnit.setIgnoreComments(true);
	 * XMLUnit.setIgnoreDiffBetweenTextAndCDATA(true); XMLUnit.setNormalizeWhitespace(true);
	 * 
	 * // This is to test the expected behavior of this function XMLAssert.assertXMLEqual(fr1, fr2); }
	 * 
	 * @Test public final void testCase8() throws SAXException, IOException, ParseException {
	 * 
	 * File testFile = new File(TEST_FILE_NAME); Logic logic = new Logic(testFile); logic.executeCommand(
	 * "Go church next sat 1:30pm 1w"); logic.saveTasksToFile();
	 * 
	 * File expectedFile = new File(EXPECTED_FILE_NAME); Storage expStorage = new Storage(expectedFile); Task
	 * newTask = new Task(); newTask.setDescription("Go church"); Calendar calDate = new GregorianCalendar();
	 * calDate.setTime(formatterDate.parse("15-4-2016")); newTask.setDate(calDate); Calendar calStartTime =
	 * new GregorianCalendar(); calStartTime.setTime(formatterDate.parse("01-1-1970 11:00:00"));
	 * newTask.setStartTime(calStartTime); expStorage.addToTaskList(newTask); expStorage.saveTasksToFile();
	 * FileReader fr1 = new FileReader(testFile); FileReader fr2 = new FileReader(expectedFile);
	 * 
	 * // Settings for XML formatting XMLUnit.setIgnoreWhitespace(true); XMLUnit.setIgnoreComments(true);
	 * XMLUnit.setIgnoreDiffBetweenTextAndCDATA(true); XMLUnit.setNormalizeWhitespace(true);
	 * 
	 * // This is to test the expected behavior of this function XMLAssert.assertXMLEqual(fr1, fr2); }
	 */

	@Test
	public final void testAddDeadlineRecurring() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = logicExecuteCommand("Go out with girlfriend 1/4 3d 15");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		createRecur("DAY",3,"01-4-216","14-4-2016");
		storageCreateExpectedTask(expectedFile, "Go out with girlfriend", "01-4-2016", null, null, false,
				createRecur("DAY",3,"01-4-216","14-4-2016"));

		
		// Settings for XML formatting
		XMLUnit.setIgnoreWhitespace(true);
		XMLUnit.setIgnoreComments(true);
		XMLUnit.setIgnoreDiffBetweenTextAndCDATA(true);
		XMLUnit.setNormalizeWhitespace(true);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(testFile);
		FileReader fr2 = new FileReader(expectedFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

}
