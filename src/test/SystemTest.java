package test;

import static org.junit.Assert.*;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Logger;

import org.custommonkey.xmlunit.XMLAssert;
import org.custommonkey.xmlunit.XMLUnit;
import org.junit.Before;
import org.junit.Test;
import org.xml.sax.SAXException;

import defaultPart.CommandInfo;
import defaultPart.Logic;
import defaultPart.Storage;
import defaultPart.Task;
import tableUi.Controller;

//@@author Shaun Lee
public class SystemTest {

	private static final Logger logger = Logger.getLogger(Controller.class.getName());

	/* Location to load/save the expected test results */
	private static final String EXPECTED_FILE_NAME = "test\\SystemTest_expected.xml";
	private static final String TEST_FILE_NAME = "tasklist.xml";

	/**
	 * Delete the tasklist before every test case
	 */
	@Before
	public void runBeforeEveryTest() {

		File file = new File(TEST_FILE_NAME);
		file.delete();
		XMLUnit.setIgnoreWhitespace(true);
		XMLUnit.setIgnoreComments(true);
		XMLUnit.setIgnoreDiffBetweenTextAndCDATA(true);
		XMLUnit.setNormalizeWhitespace(true);
	}

	/**
	 * Helper function to create the expected file to compare with the one generated by logic
	 * 
	 * @param expectedFile
	 *            Expected file to save
	 * @throws SAXException
	 * @throws ParseException
	 */
	private void storageCreateExpectedTask(Storage storage, File expectedFile, String description,
			String startDate, String startTime, String endTime, Boolean completed, String endDate,
			int recurField, int frequency) throws SAXException, ParseException {

		Task newTask = new Task();
		newTask.setDescription(description);

		if (startDate != null) {
			newTask.setStartDateFromFormattedString(startDate);
		}
		if (startTime != null) {
			newTask.setStartTimeFromFormattedString(startTime);
		}
		if (endDate != null) {
			newTask.setEndDateFromFormattedString(endDate);
		}
		if (endTime != null) {
			newTask.setEndTimeFromFormattedString(endTime);
		}
		if (completed) {
			newTask.toggleCompleted();
		}
		if (recurField != 0) {
			newTask.setRecurField(recurField);
			newTask.setRecurFrequency(frequency);
		}

		storage.addToTaskList(newTask);
		storage.saveTasksToFile();
	}

	/**
	 * Helper function to execute the command through logic and saving it through its storage
	 * 
	 * @param cmd
	 *            command to be parsed and executed
	 * @return
	 * @throws SAXException
	 */
	private CommandInfo logicExecuteCommand(Logic logic, String cmd) throws SAXException {

		CommandInfo returnInfo = logic.executeCommand(cmd);
		logic.saveTasksToFile();
		return returnInfo;
	}

	@Test
	public final void testAddFloatingTask() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "CS2103T Reading");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "CS2103T Reading", null, null, null, false, null, 0,
				0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineWithNumberInDescription()
			throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "500 words CFG1010 8/4/2017");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "500 words CFG1010", "8/4/2017", null, null, false,
				null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineWithSimpleNaturalLanguageProcessingMonday()
			throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Date test mon");
		logicExecuteCommand(logic, "Date test monday");
		logicExecuteCommand(logic, "Date test Mon");
		logicExecuteCommand(logic, "Date test Monday");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		GregorianCalendar expectedDate = new GregorianCalendar();
		if (expectedDate.get(Calendar.DAY_OF_WEEK) == Calendar.MONDAY) {
			expectedDate.add(Calendar.DATE, 7);
		} else {
			while (expectedDate.get(Calendar.DAY_OF_WEEK) != Calendar.MONDAY) {
				expectedDate.add(Calendar.DATE, 1);
			}
		}
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineWithSimpleNaturalLanguageProcessingTuesday()
			throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Date test tue");
		logicExecuteCommand(logic, "Date test tues");
		logicExecuteCommand(logic, "Date test tuesday");
		logicExecuteCommand(logic, "Date test Tue");
		logicExecuteCommand(logic, "Date test Tues");
		logicExecuteCommand(logic, "Date test Tuesday");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		GregorianCalendar expectedDate = new GregorianCalendar();
		if (expectedDate.get(Calendar.DAY_OF_WEEK) == Calendar.TUESDAY) {
			expectedDate.add(Calendar.DATE, 7);
		} else {
			while (expectedDate.get(Calendar.DAY_OF_WEEK) != Calendar.TUESDAY) {
				expectedDate.add(Calendar.DATE, 1);
			}
		}
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineWithSimpleNaturalLanguageProcessingWednesday()
			throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Date test wed");
		logicExecuteCommand(logic, "Date test WED");
		logicExecuteCommand(logic, "Date test wednesday");
		logicExecuteCommand(logic, "Date test WEDNESDAY");
		logicExecuteCommand(logic, "Date test Wed");
		logicExecuteCommand(logic, "Date test Wednesday");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		GregorianCalendar expectedDate = new GregorianCalendar();
		if (expectedDate.get(Calendar.DAY_OF_WEEK) == Calendar.WEDNESDAY) {
			expectedDate.add(Calendar.DATE, 7);
		} else {
			while (expectedDate.get(Calendar.DAY_OF_WEEK) != Calendar.WEDNESDAY) {
				expectedDate.add(Calendar.DATE, 1);
			}
		}
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineWithSimpleNaturalLanguageProcessingThursday()
			throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Date test thur");
		logicExecuteCommand(logic, "Date test thurs");
		logicExecuteCommand(logic, "Date test thursday");
		logicExecuteCommand(logic, "Date test Thur");
		logicExecuteCommand(logic, "Date test Thurs");
		logicExecuteCommand(logic, "Date test Thursday");
		logicExecuteCommand(logic, "Date test THURSDAY");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		GregorianCalendar expectedDate = new GregorianCalendar();
		if (expectedDate.get(Calendar.DAY_OF_WEEK) == Calendar.THURSDAY) {
			expectedDate.add(Calendar.DATE, 7);
		} else {
			while (expectedDate.get(Calendar.DAY_OF_WEEK) != Calendar.THURSDAY) {
				expectedDate.add(Calendar.DATE, 1);
			}
		}
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineWithSimpleNaturalLanguageProcessingFriday()
			throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Date test fri");
		logicExecuteCommand(logic, "Date test friday");
		logicExecuteCommand(logic, "Date test Fri");
		logicExecuteCommand(logic, "Date test Friday");
		logicExecuteCommand(logic, "Date test FRIDAY");
		logicExecuteCommand(logic, "Date test fridaY");
		logicExecuteCommand(logic, "Date test FridaY");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		GregorianCalendar expectedDate = new GregorianCalendar();
		if (expectedDate.get(Calendar.DAY_OF_WEEK) == Calendar.FRIDAY) {
			expectedDate.add(Calendar.DATE, 7);
		} else {
			while (expectedDate.get(Calendar.DAY_OF_WEEK) != Calendar.FRIDAY) {
				expectedDate.add(Calendar.DATE, 1);
			}
		}
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineWithSimpleNaturalLanguageProcessingSaturday()
			throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Date test sat");
		logicExecuteCommand(logic, "Date test Sat");
		logicExecuteCommand(logic, "Date test Saturday");
		logicExecuteCommand(logic, "Date test saturday");
		logicExecuteCommand(logic, "Date test SATURDAY");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		GregorianCalendar expectedDate = new GregorianCalendar();
		if (expectedDate.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY) {
			expectedDate.add(Calendar.DATE, 7);
		} else {
			while (expectedDate.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY) {
				expectedDate.add(Calendar.DATE, 1);
			}
		}
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineWithSimpleNaturalLanguageProcessingSunday()
			throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Date test sun");
		logicExecuteCommand(logic, "Date test Sun");
		logicExecuteCommand(logic, "Date test Sunday");
		logicExecuteCommand(logic, "Date test sunday");
		logicExecuteCommand(logic, "Date test SUNDAY");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		GregorianCalendar expectedDate = new GregorianCalendar();
		if (expectedDate.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) {
			expectedDate.add(Calendar.DATE, 7);
		} else {
			while (expectedDate.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY) {
				expectedDate.add(Calendar.DATE, 1);
			}
		}
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineWithSimpleNaturalLanguageProcessingToday()
			throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Date test Today");
		logicExecuteCommand(logic, "Date test today");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		GregorianCalendar expectedDate = new GregorianCalendar();
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineWithSimpleNaturalLanguageProcessingTomorrow()
			throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Date test tomorrow");
		logicExecuteCommand(logic, "Date test Tomorrow");
		logicExecuteCommand(logic, "Date test tmrw");
		logicExecuteCommand(logic, "Date test tmr");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		GregorianCalendar expectedDate = new GregorianCalendar();
		expectedDate.add(Calendar.DATE, 1);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Date test",
				dateFormat.format(expectedDate.getTime()), null, null, false, null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineWithTime() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Plan Jap Trip 30/1/2017 11am");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Plan Jap Trip", "30/1/2017", "11:00AM", null, false,
				null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddEvent() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Buy some potatoes 30/1/2017 11am-12pm");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Buy some potatoes", "30/1/2017", "11:00AM",
				"12:00PM", false, null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineRecurringDay() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Go out with girlfriend 1/9 3d");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Go out with girlfriend", "01/9/2016", null, null,
				false, null, Calendar.DAY_OF_YEAR, 3);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineRecurringDayWithWraparoundYear()
			throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Go out with girlfriend 1/4 3d");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Go out with girlfriend", "01/4/2017", null, null,
				false, null, Calendar.DAY_OF_YEAR, 3);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineRecurringWeek() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Go out with jully 2/9-16/9 1w");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Go out with jully", "02/9/2016", null, null, false,
				"16/9/2016", Calendar.WEEK_OF_YEAR, 1);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddDeadlineRecurringEndWithNumber()
			throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "HIMYM 1/1/2027 12:00 1d");

		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "HIMYM", "1/1/2027", "12:00PM", null, false, null,
				Calendar.DAY_OF_YEAR, 1);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testAddEventRecurringDay() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Buy some potatoes 1/5/2017-11/5/2017 11am-12pm 1d");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Buy some potatoes", "1/5/2017", "11:00AM",
				"12:00PM", false, "11/5/2017", Calendar.DAY_OF_YEAR, 1);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testEditDescription() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "CS2103T Reading");
		logicExecuteCommand(logic, "e 1 Potato Reading");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Potato Reading", null, null, null, false, null, 0,
				0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testEditDate() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Tomato Reading 11/4/2017");
		logicExecuteCommand(logic, "e 1 20/4/2017");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Tomato Reading", "20/4/2017", null, null, false,
				null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testEditStartTime() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Tomato Reading 11/4/2017 2pm");
		logicExecuteCommand(logic, "e 1 3pm");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Tomato Reading", "11/4/2017", "3:00PM", null, false,
				null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testEditStartTimeFromEvent() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Cabbage Reading 11/4/2017 2pm-4pm");
		logicExecuteCommand(logic, "e 1 3pm");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Cabbage Reading", "11/4/2017", "3:00PM", "4:00PM",
				false, null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testEditEndTime() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Cucumber Reading 11/4/2017 2pm-4pm");
		logicExecuteCommand(logic, "e 1 2pm-5pm");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Cucumber Reading", "11/4/2017", "2:00PM", "5:00PM",
				false, null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testEditRecurTimeUnit() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Buy some potatoes 1/5/2017 11am-12pm 1d");
		logicExecuteCommand(logic, "e 1 1w");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Buy some potatoes", "1/5/2017", "11:00AM",
				"12:00PM", false, null, Calendar.WEEK_OF_YEAR, 1);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testEditRecurFrequency() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Buy some potatoes 1/5/2017 11am-12pm 1d");
		logicExecuteCommand(logic, "e 1 3d");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Buy some potatoes", "1/5/2017", "11:00AM",
				"12:00PM", false, null, Calendar.DAY_OF_YEAR, 3);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testEditRecurTimesToRecur() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Buy some potatoes 1/5/2017-10/5/2017 11am-12pm 1d");
		logicExecuteCommand(logic, "e 1 3d");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Buy some potatoes", "1/5/2017", "11:00AM",
				"12:00PM", false, "10/5/2017", Calendar.DAY_OF_YEAR, 3);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testEditRecurEndOfRecur() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Buy some potatoes 1/5/2017-1/1/2018 11am-12pm 1d");
		logicExecuteCommand(logic, "e 1 1/5/2017-10/1/2018");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Buy some potatoes", "1/5/2017", "11:00AM",
				"12:00PM", false, "10/1/2018", Calendar.DAY_OF_YEAR, 1);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testEditInvalidIndex() throws SAXException, IOException, ParseException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Buy some potatoes 1/5/2017-1/1/2017 11am-12pm 1d");
		logicExecuteCommand(logic, "e 2 Buy Tomatoes Instead");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Buy some potatoes", "1/5/2017", "11:00AM",
				"12:00PM", false, "1/1/2017", Calendar.DAY_OF_YEAR, 1);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testFindWord() throws SAXException, ParseException, IOException {

		runBeforeEveryTest();

		// Setting up actual Task List for comparison
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Plan some trips 1/5/2017");
		logicExecuteCommand(logic, "Fly to Japan 1/5/2017");
		CommandInfo returnIndexs = logicExecuteCommand(logic, "f Trip");
		List<Integer> actualIndexList = returnIndexs.getIndexesFound();

		// Setting up expected Task List for comparison
		List<Integer> expectedList = new ArrayList<Integer>();
		expectedList.add(0);
		expectedList.add(2);

		// This is to test the expected behavior of this function
		assertEquals(expectedList.get(0), actualIndexList.get(0));
	}

	@Test
	public final void testFindCapitalizedWord() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Plan some trips 1/5/2017");
		logicExecuteCommand(logic, "Fly to Japan 1/5/2017");
		logicExecuteCommand(logic, "Trips Japan Plan 1/5/2017");
		CommandInfo returnIndexs = logicExecuteCommand(logic, "f TRIP");
		List<Integer> actualIndexList = returnIndexs.getIndexesFound();

		// Setting up expected Task List for comparison
		List<Integer> expectedList = new ArrayList<Integer>();
		expectedList.add(0);
		expectedList.add(2);

		// This is to test the expected behavior of this function
		assertEquals(expectedList, actualIndexList);
	}

	@Test
	public final void testFindUnorderedWords() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Plan some trips 1/5/2017");
		logicExecuteCommand(logic, "Fly to Japan 1/5/2017");
		logicExecuteCommand(logic, "Trip Japan Plan 1/5/2017");
		CommandInfo returnIndexs = logicExecuteCommand(logic, "f trip plan");
		List<Integer> actualIndexList = returnIndexs.getIndexesFound();

		// Setting up expected Task List for comparison
		List<Integer> expectedList = new ArrayList<Integer>();
		expectedList.add(0);
		expectedList.add(2);

		// This is to test the expected behavior of this function
		assertEquals(expectedList, actualIndexList);

	}

	@Test
	public final void testDeleteFirstIndex() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Plan some trips 1/5/2017");
		logicExecuteCommand(logic, "Fly to Japan 1/5/2017");
		logicExecuteCommand(logic, "Trip Japan Plan 1/5/2017");
		logicExecuteCommand(logic, "d 1");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Fly to Japan", "1/5/2017", null, null, false, null,
				0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Trip Japan Plan", "1/5/2017", null, null, false,
				null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testDeleteMiddleIndex() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Plan some trips 1/5/2017");
		logicExecuteCommand(logic, "Fly to Japan 1/5/2017");
		logicExecuteCommand(logic, "Trip Japan Plan 1/5/2017");
		logicExecuteCommand(logic, "d 2");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Plan some trips", "1/5/2017", null, null, false,
				null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Trip Japan Plan", "1/5/2017", null, null, false,
				null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testDeleteLastIndex() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Plan some trips 1/5/2017");
		logicExecuteCommand(logic, "Fly to Japan 1/5/2017");
		logicExecuteCommand(logic, "Trip Japan Plan 1/5/2017");
		logicExecuteCommand(logic, "d 3");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Plan some trips", "1/5/2017", null, null, false,
				null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Fly to Japan", "1/5/2017", null, null, false, null,
				0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testDeleteInvalidIndex() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Plan some trips 1/5/2017");
		logicExecuteCommand(logic, "d 2");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Plan some trips", "1/5/2017", null, null, false,
				null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testDeleteFloatingTasks() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Buy Potatoes");
		logicExecuteCommand(logic, "Plan some trips 1/5/2017");
		logicExecuteCommand(logic, "Eat Potatoes");
		logicExecuteCommand(logic, "Cook Potatoes");
		logicExecuteCommand(logic, "Love Potatoes");
		logicExecuteCommand(logic, "d .");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Plan some trips", "1/5/2017", null, null, false,
				null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testDeleteByDate() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Buy Potatoes");
		logicExecuteCommand(logic, "Plan some trips 1/5/2017");
		logicExecuteCommand(logic, "Fly to Japan 1/6/2017");
		logicExecuteCommand(logic, "Trip Japan Plan 1/7/2017");
		logicExecuteCommand(logic, "d < 1/6/2017");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Fly to Japan", "1/6/2017", null, null, false, null,
				0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Trip Japan Plan", "1/7/2017", null, null, false,
				null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Buy Potatoes", null, null, null, false, null, 0, 0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testDeleteRecurTriggerWithIndex() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Plan some trips 1/5/2017 3d");
		logicExecuteCommand(logic, "d 1");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Plan some trips", "4/5/2017", null, null, false,
				null, Calendar.DAY_OF_YEAR, 3);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testDeleteRecurTriggerWithIndexTwice()
			throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Plan some trips 1/5/2017 3d");
		logicExecuteCommand(logic, "d 1");
		logicExecuteCommand(logic, "d 1");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Plan some trips", "7/5/2017", null, null, false,
				null, Calendar.DAY_OF_YEAR, 3);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testDeleteRecurTriggerWithLessThanDate()
			throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Plan some trips 1/5/2017 3d");
		logicExecuteCommand(logic, "d < 2/5/2017");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Plan some trips", "4/5/2017", null, null, false,
				null, Calendar.DAY_OF_YEAR, 3);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testDeleteRecurClear() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Plan some trips 1/5/2017-4/5/2017 3d");
		logicExecuteCommand(logic, "Potato potato");
		logicExecuteCommand(logic, "d 1");
		logicExecuteCommand(logic, "d 1");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Potato potato", null, null, null, false, null, 0,
				0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testDeleteRecurClearWithEndDate() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Plan some trips 1/5/2017-4/5/2017 3d");
		logicExecuteCommand(logic, "Potato potato");
		logicExecuteCommand(logic, "d 1");
		logicExecuteCommand(logic, "d 1");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Potato potato", null, null, null, false, null, 0,
				0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testDeleteRecurClearWithEndDateBeforeTriggerDate()
			throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Plan some trips 1/5/2017 3d 3/5/2017");
		logicExecuteCommand(logic, "Potato potato");
		logicExecuteCommand(logic, "d 1");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Potato potato", null, null, null, false, null, 0,
				0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testChangeDirectory() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "Buy Potatoes");
		logicExecuteCommand(logic, "s test");

		// Setting up expected Task List for comparison
		File expectedFile = new File("test\\tasklist.xml");
		assert (expectedFile.isFile());
		assert (expectedFile.canRead());

		logicExecuteCommand(logic, "s /");
	}

}
