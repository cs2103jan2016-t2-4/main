//@@author Julian	
	private Calendar getTaskStartTime(String timeString) {
		Calendar time = new GregorianCalendar();
		time.set(Calendar.MINUTE, 0);
		String timeDelimiterRegex = ":|\\.";
		String[] hoursAndMinutes = timeString.split(timeDelimiterRegex, 2);
		assert (hoursAndMinutes.length > 0);
		switch (hoursAndMinutes.length) {
			case 2 :
				String minutesToChange = hoursAndMinutes[1];
				int minutes = 0;
				if (minutesToChange.contains("pm")) {
					minutes = Integer.parseInt(minutesToChange.split("pm")[0]) + 12 * 60;
				} else if (minutesToChange.contains("am")) {
					minutes = Integer.parseInt(minutesToChange.split("am")[0]);
				} else {
					minutes = Integer.parseInt(minutesToChange);
				}
				time.set(Calendar.MINUTE, minutes);
				// fallthrough
			case 1 :
				String hoursToChange = hoursAndMinutes[0];
				int hours = 0;
				if (hoursToChange.contains("pm")) {
					hours = Integer.parseInt(hoursToChange.split("pm")[0]) + 12;
				} else if (hoursToChange.contains("am")) {
					hours = Integer.parseInt(hoursToChange.split("am")[0]);
				} else {
					hours = Integer.parseInt(hoursToChange);
				}
				time.set(Calendar.HOUR, hours);
				break;
		}
		return time;
	}

//@@author A0125497W
//Codes were removed due to the change in the structure of our Task Class
	/**
	 * Extract a TaskTime from node with specified tag and returns as Calendar object
	 * 
	 * @param taskElement
	 *            Element object containing the task details
	 * @param tag
	 *            Tag to specify which date, e.g. "start", "end'
	 * @return Calendar class object converted from the date
	 * @throws ParseException
	 *             Error in formatting the date
	 */
	private Calendar extractTimeFromNode(Element taskElement, String tag) throws ParseException {

		// Assert than taskElement & tag are not null
		assert (taskElement != null);
		assert (tag != null || tag != "");

		String calendarString = taskElement.getElementsByTagName(tag).item(0).getTextContent();
		if (calendarString == "") {
			return null;
		}
		Calendar calendar = new GregorianCalendar();
		// calendar.parse(calendarString);
		return calendar;
	}

	/**
	 * Extract a Calendar from node with specified tag and returns as Calendar object
	 * 
	 * @param taskElement
	 *            Element object containing the task details
	 * @param tag
	 *            Tag to specify which date, e.g. "start", "end'
	 * @return Calendar class object converted from the date
	 * @throws ParseException
	 *             Error in formatting the date
	 */
	private Calendar extractDateFromNode(Element taskElement, String tag) throws ParseException {

		// Assert than taskElement & tag are not null
		assert (taskElement != null);
		assert (tag != null || tag != "");

		String calendarString = taskElement.getElementsByTagName(tag).item(0).getTextContent();
		if (calendarString == "") {
			return null;
		}
		Calendar calendar = new GregorianCalendar();
		// calendar.(calendarString);
		return calendar;
	}

//No longer needed due to the merging of recur object into Task class 
	 /**
	 * Helper function to create the a recur item based on presence of parameters
	 *
	 * @throws ParseException
	 */
	 private Recur createRecur(String timeUnit, int frequency, String startOfRecur, String endOfRecur)
	 throws ParseException {
	
	 Recur newRecur = new Recur();
	
	 newRecur.setTimeUnit(TimeUnit.valueOf(timeUnit));
	 newRecur.setFrequency(frequency);
	 TaskDate startDate = new TaskDate();
	 startDate.setDateFromString(startOfRecur);
	 newRecur.setStartDate(startDate);
	 if (endOfRecur != null) {
	 TaskDate endDate = new TaskDate();
	 endDate.setDateFromString(endOfRecur);
	 newRecur.setEndDate(endDate);
	 }
	 return newRecur;
	
	 }

/**
 -	 * Extract out recur class from task and creates the proper XML structure for saving
 -	 * 
 -	 * @param doc
 -	 *            Document which contains the current XML structure
 -	 * @param taskItem
 -	 *            Task to extract out the recur class from
 -	 * @param parentElement
 -	 *            Parent element to append the recur XML structure to
 -	 */
 -	private void extractRecurrFromTask(Document doc, Task taskItem, Element parentElement) {
 -		Recur recur = taskItem.getRecur();
 -		if (recur == null) {
 -			return;
 -		}
 -
 -		// Assert that the parameters are not null
 -		assert (doc != null);
 -		assert (taskItem != null);
 -		assert (parentElement != null);
 -
 -		Element recurrElement = doc.createElement(TAG_TASK_RECUR);
 -		Element recurTimeUnitElement = doc.createElement(TAG_TASK_TIMEUNIT);
 -		Element recurFrequencyElement = doc.createElement(TAG_TASK_FREQUENCY);
 -		Element recurStartOfRecurrElement = doc.createElement(TAG_TASK_START_OF_RECURR);
 -		Element recurEndOfRecurrElement = doc.createElement(TAG_TASK_END_OF_RECURR);
 -		recurTimeUnitElement.appendChild(doc.createTextNode(recur.getTimeUnit().toString()));
 -		recurFrequencyElement.appendChild(doc.createTextNode(Integer.toString(recur.getFrequency())));
 -		recurStartOfRecurrElement.appendChild(doc.createTextNode(recur.getStartDate().toString()));
 -		TaskDate endDate = recur.getEndDate();
 -		recurEndOfRecurrElement.appendChild(doc.createTextNode(endDate == null ? "" : endDate.toString()));
 -		recurrElement.appendChild(recurTimeUnitElement);
 -		recurrElement.appendChild(recurFrequencyElement);
 -		recurrElement.appendChild(recurStartOfRecurrElement);
 -		recurrElement.appendChild(recurEndOfRecurrElement);
 -		parentElement.appendChild(recurrElement);
 -	}
 -
 -	/**

/**
 -	 * Extract out a recur class from the recur XML structure of a task, called when importing tasks
 -	 * 
 -	 * @param taskElement
 -	 *            Element object containing the task/recur details
 -	 * @return Recur object in taskElement object, null if task does not recur
 -	 * @throws ParseException
 -	 *             Error in formatting the date
 -	 */
 -	private Recur extractRecurFromXML(Element taskElement) throws ParseException {
 -
 -		// Assert than taskElement is not null
 -		assert (taskElement != null);
 -
 -		if (taskElement.getElementsByTagName(TAG_TASK_RECUR).getLength() == 0) {
 -			return null;
 -		}
 -
 -		String timeUnit = extractStringFromNode(taskElement, TAG_TASK_TIMEUNIT);
 -		int frequency = Integer.parseInt(extractStringFromNode(taskElement, TAG_TASK_FREQUENCY));
 -		TaskDate startOfRecurr = extractDateFromNode(taskElement, TAG_TASK_START_OF_RECURR);
 -		TaskDate endOfRecurr = extractDateFromNode(taskElement, TAG_TASK_END_OF_RECURR);
 -		Recur taskRecurr = new Recur();
 -		taskRecurr.setTimeUnit(TimeUnit.valueOf(timeUnit));
 -		taskRecurr.setFrequency(frequency);
 -		taskRecurr.setStartDate(startOfRecurr);
 -		taskRecurr.setEndDate(endOfRecurr);
 -		return taskRecurr;
 -	}

// Test cases removed due to changes in functionality
	@Test
	public final void testNotEqualToDate2() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "One potatoes 1/5/2017");
		logicExecuteCommand(logic, "Two potatoes 1/6/2017");
		logicExecuteCommand(logic, "Three potatoes 1/7/2017");
		logicExecuteCommand(logic, "Potato potato");
		logicExecuteCommand(logic, "d <> 1/6/2017");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Two potatoes", "1/6/2017", null, null, false, null,
				0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Potato potato", null, null, null, false, null, 0,
				0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testNotEqualToDate3() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "One potatoes 1/5/2017");
		logicExecuteCommand(logic, "Two potatoes 1/6/2017");
		logicExecuteCommand(logic, "Three potatoes 1/7/2017");
		logicExecuteCommand(logic, "Potato potato");
		logicExecuteCommand(logic, "d >< 1/6/2017");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Two potatoes", "1/6/2017", null, null, false, null,
				0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Potato potato", null, null, null, false, null, 0,
				0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testDeleteMoreThanEqualToDate() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "One potatoes 1/5/2017");
		logicExecuteCommand(logic, "Two potatoes 1/6/2017");
		logicExecuteCommand(logic, "Three potatoes 1/7/2017");
		logicExecuteCommand(logic, "Potato potato");
		logicExecuteCommand(logic, "d => 1/6/2017");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "One potatoes", "1/5/2017", null, null, false, null,
				0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Potato potato", null, null, null, false, null, 0,
				0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testDeleteEqualToMoreThanDate() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "One potatoes 1/5/2017");
		logicExecuteCommand(logic, "Two potatoes 1/6/2017");
		logicExecuteCommand(logic, "Three potatoes 1/7/2017");
		logicExecuteCommand(logic, "Potato potato");
		logicExecuteCommand(logic, "d => 1/6/2017");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Three potatoes", "1/5/2017", null, null, false,
				null, 0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Potato potato", null, null, null, false, null, 0,
				0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testDeleteEqualToLessThanDate() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "One potatoes 1/5/2017");
		logicExecuteCommand(logic, "Two potatoes 1/6/2017");
		logicExecuteCommand(logic, "Three potatoes 1/7/2017");
		logicExecuteCommand(logic, "Potato potato");
		logicExecuteCommand(logic, "d =< 1/6/2017");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "One potatoes", "1/7/2017", null, null, false, null,
				0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Potato potato", null, null, null, false, null, 0,
				0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}

	@Test
	public final void testDeleteMoreThanDate() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "One potatoes 1/5/2017");
		logicExecuteCommand(logic, "Two potatoes 1/6/2017");
		logicExecuteCommand(logic, "Three potatoes 1/7/2017");
		logicExecuteCommand(logic, "Potato potato");
		logicExecuteCommand(logic, "d > 1/6/2017");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "One potatoes", "1/5/2017", null, null, false, null,
				0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Two potatoes", "1/6/2017", null, null, false, null,
				0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Potato potato", null, null, null, false, null, 0,
				0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}
	@Test
	public final void testNotEqualToDate() throws SAXException, ParseException, IOException {

		// Setting up actual Task List for comparison
		File testFile = new File(TEST_FILE_NAME);
		Logic logic = new Logic(logger);
		logicExecuteCommand(logic, "One potatoes 1/5/2017");
		logicExecuteCommand(logic, "Two potatoes 1/6/2017");
		logicExecuteCommand(logic, "Three potatoes 1/7/2017");
		logicExecuteCommand(logic, "Potato potato");
		logicExecuteCommand(logic, "d != 1/6/2017");

		// Setting up expected Task List for comparison
		File expectedFile = new File(EXPECTED_FILE_NAME);
		Storage storage = new Storage(expectedFile, logger);
		storageCreateExpectedTask(storage, expectedFile, "Two potatoes", "1/6/2017", null, null, false, null,
				0, 0);
		storageCreateExpectedTask(storage, expectedFile, "Potato potato", null, null, null, false, null, 0,
				0);

		// This is to test the expected behavior of this function
		FileReader fr1 = new FileReader(expectedFile);
		FileReader fr2 = new FileReader(testFile);
		XMLAssert.assertXMLEqual(fr1, fr2);
	}
